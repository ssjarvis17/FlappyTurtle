import pygame 
from pygame.locals import *
import random

pygame.init()

clock = pygame.time.Clock()
fps = 60

screen_width = 864
screen_height = 936

screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption('Flappy Turtle')

#Font
font = pygame. font.SysFont('Arial', 60)

#Color
white = (255, 255, 255)

#Define Variables
ground_scroll = 0
scroll_speed = 4
flying = False
game_over = False
pipe_gap = 200
pipe_frequency = 1500 #Timer. How often the pipes appear in milliseconds 
last_pipe = pygame.time.get_ticks() - pipe_frequency #Check when the last pipe was created. Subtract by frequency so as soon as the game starts, we will imediately generate pipes instead of a delay. 
score = 0
pass_pipe = False

#Load Images
bg = pygame.image.load('imgs/bg.png')
ground_img = pygame.image.load('imgs/ground.png')
button_img = pygame.image.load('imgs/restart.png')

def draw_text(text, font, text_colr, x, y):
    img = font.render(text, True, text_colr)
    screen.blit(img, (x, y))

def reset_game():
    pipe_group.empty()
    flappy.rect.x = 100
    flappy.rect.y = int(screen_height / 2)
    score = 0

    #Score is a local variable here and not going to affect the global variable. We can either set up 'score' as a global var in the function. Or return the score.
    return score


class Tortuga(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.images = []
        self.index = 0

        #Controls the Speed of the animation
        self.counter = 0

        #Range of images. Since we have three images, between one and four, since the range does not take the last 4. 
        for num in range(1,4):
            img = pygame.image.load(f'imgs/tortuga{num}.png')   #We are updating the image path with each number .png. Pythons' way of formatting strings. 

            #Assign the image into the list. Image we want to append, is the image we just loaded. 
            self.images.append(img)

        #We want to start and take the first image. We take the image from the images list by takign the self.index value.    
        self.image = self.images[self.index]
        self.rect = self.image.get_rect()
        self.rect.center = [x, y]

        #Set the velocity to start at 0
        self.vel = 0

        #Set the value if the user has clikced to False
        self.clicked = False

    def update (self):
        if flying == True:
            #Increase the velocity every iteration so the tortuga accelerates. Then add that value to the y coordinate of the tort. Self.vel variable is a float so wrap in a int().
            self.vel += 0.5

            #The velocity value will continue to increase forever. Use this if statement to set a cap at 8 for the velocity. 
            if self.vel > 8:
                #positive velocity moves the bird down.
                self.vel = 8

            #If statement to handle if the tort reaches the bottom of ground, then to stop. 768 is calculated in while loop. 
            if self.rect.bottom < 768:
                self.rect.y += int(self.vel)

        if game_over == False:
            #Jumping. Function get_pressed() just looks for any mouse click. When we define the [0] index, we can capture which click. 0, being the first is left click. 
            #Set it equal to 1, to show that it was clicked & check if the user has not clicked.
            if pygame.mouse.get_pressed()[0] == 1 and self.clicked == False:
                #Set that the user has clicked
                self.clicked = True

                #Provide a negative velocity to jump the character.
                self.vel = -10

            #Look for the mouse being released. If the mouse is not clicked, then the self.click is False.
            if pygame.mouse.get_pressed()[0] == 0:
                self.clicked = False

                
            #Control the Animation
            self.counter += 1
            flap_cooldown = 5

            if self.counter > flap_cooldown:
                self.counter = 0
                self.index += 1

                #Cycles through list and will throw an error unless we reset the index at a certain value
                #Create a check that 'self.index' doesnt go above the length of our image. Cant exceed num of images in the index list. 
                if self.index >= len(self.images):
                    self.index = 0

            self.image = self.images[self.index]

            #Rotate the tortuga. We want to rotate the source image derived from the 'images' list at the point of the index.  
            #The second val in rotate() is the angle of rotation. If we just put in self.vel, it goes the opposite direction when falling. Positive value rotates anti-clockwise.
            #Multiply the angle with a negative value to correct the direction. 
            self.image = pygame.transform.rotate(self.images[self.index], self.vel * -2)
        else:
            #Set bird angle when it hits the bottom. Update the rotate to -90 to rotate angle 90 degrees clockwise.
            self.image = pygame.transform.rotate(self.images[self.index], -90)

class Pipe(pygame.sprite.Sprite):
    def __init__(self, x, y, position):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load('imgs/pipe.png')
        self.rect = self.image.get_rect()
        #Position 1 is the top pipe, -1 is the bottom pipe
        if position == 1:
            self.image = pygame.transform.flip(self.image, False, True)
            self.rect.bottomleft = [x, y - int(pipe_gap / 2)]
        if position == -1:
            self.rect.topleft = [x, y + int(pipe_gap / 2)]
        
    def update(self):
        self.rect.x -= scroll_speed
        if self.rect.right < 0: #If Pipe scrolls off the screen, remove it. 
            self.kill()

    
class Button():
    def __init__(self, x, y, image):
        self.image = image
        self.rect = self.image.get_rect()
        self.rect.topleft = (x, y)

    def draw(self):

        action = False

        #Get the Mouse Position
        pos = pygame.mouse.get_pos()

        #Check if the mouse is over the button
        if self.rect.collidepoint(pos):
            #Look for a mouse click
            if pygame.mouse.get_pressed()[0] == 1:
                action = True

        #Draw the Button
        screen.blit(self.image, (self.rect.x, self.rect.y))

        return action 

tortuga_group = pygame.sprite.Group()
pipe_group = pygame.sprite.Group()


flappy = Tortuga(100, int(screen_height / 2))

tortuga_group.add(flappy)

#Create the Restart Button
button = Button(screen_width // 2 - 50, screen_height // 2 - 100, button_img)

run = True
while run:

    clock.tick(fps)

    #Draw Background
    screen.blit(bg, (0,0))

    tortuga_group.draw(screen)
    tortuga_group.update()

    pipe_group.draw(screen)
    

    #Draw Ground to keep stationary
    screen.blit(ground_img, (ground_scroll,768))

    #Check Score
    if len(pipe_group) > 0:
        if tortuga_group.sprites()[0].rect.left > pipe_group.sprites()[0].rect.left and tortuga_group.sprites()[0].rect.right < pipe_group.sprites()[0].rect.right and pass_pipe == False:
                pass_pipe = True
        if pass_pipe == True:
            if tortuga_group.sprites()[0].rect.left > pipe_group.sprites()[0].rect.right:
                score += 1
                pass_pipe = False
                


    draw_text(str(score), font, white, int(screen_width / 2), 20)
            

    #Collusion - False values handle if either group should be deleted after a collide. Returning False since we do not want to delete. 
    if pygame.sprite.groupcollide(tortuga_group, pipe_group, False, False) or flappy.rect.top < 0:
        game_over = True


    #Check if tortuga has hit the ground. 
    if flappy.rect.bottom > 768:
        game_over = True
        flying = False


    if game_over == False and flying == True:
        #Generate new pipes
        time_now = pygame.time.get_ticks()
        if time_now - last_pipe > pipe_frequency:
            pipe_height = random.randint(-100, 100) #Pick a random number in this range
            btm_pipe = Pipe(screen_width, int(screen_height / 2) + pipe_height, -1)
            top_pipe = Pipe(screen_width, int(screen_height / 2) + pipe_height, 1)
            pipe_group.add(btm_pipe)
            pipe_group.add(top_pipe)
            last_pipe = time_now

        #Draw/Scroll Ground
        # Moved code below above out of for loop. We do not want to keep increasing this variable. 
        # screen.blit(ground_img, (ground_scroll,768))
        ground_scroll -= scroll_speed
        if abs(ground_scroll) > 35:
            ground_scroll = 0

        pipe_group.update()

    #Check for the Game Over and Reset
    if game_over == True:
        if button.draw() == True:
            game_over = False

            #since we are returning the score in the function, we must set the score equal to reset_game
            score = reset_game()

            

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

        #Look for mouse click & only if flying n game_over is False. Set flying to True. 
        if event.type == pygame.MOUSEBUTTONDOWN and flying == False and game_over == False:
            flying = True
    
    pygame.display.update()

pygame.quit()
